<!DOCTYPE html>
<html lang="en">

<head>
  <title>Chat Bot</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="stylesheet" href="/css/style.css">
  <link
    href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900&display=swap"
    rel="stylesheet">
  <link rel="icon" href="favicon.png">
</head>

<body class="background">
  <div class="container shadow-lg my-0 p-0 full-height" style=" display: flex; flex-direction: column;">
    <div class="d-flex chat-header w-100 py-2 text-center justify-content-between align-items-center">
      <div class="d-flex flex-row">
        <div class="d-flex ps-3 pe-2 py-1 position-relative">
          <img id="agentImage1" src="/agent.png" alt="" class="" style="height: 60px; width: auto;">
          <span class="position-absolute start-100 translate-middle p-1 rounded-circle"
            style="background-color: rgb(5, 233, 5); bottom: 0; margin-left: -20px !important;">
            <span class="visually-hidden">New alerts</span>
          </span>
        </div>
        <div class="d-flex flex-column chatDetails align-items-start justify-content-center">
          <p class="mb-0">Chat Assistant</p>
          <span class="mb-0">Online</span>
        </div>
      </div>
      <button class="closeButton" onclick="chatCloseByUser()">
        <i class="bi bi-x-lg"></i>
      </button>
    </div>

    <div class="d-flex chat-container" style="flex-grow: 1;">
      <div id="response" class="chat-box" style="overflow-y: auto; flex-grow: 1;">
        <!-- Chat messages -->
      </div>
    </div>

    <!-- <div class="d-flex p-0 m-0 flex-column justify-content-center align-items-center">
      <div class="d-flex flex-row" style="border-top: solid 1px #e0e0e0; padding-top: 10px;"></div>
      <form name="questionForm" id="questionForm" class="d-flex flex-row w-100">
        <div class="d-flex flex-row w-100">
          <input class="form-control chat-input ms-lg-1" placeholder="Escribe mensaje aquÃ­..." type="text" id="userQuestion"
            name="question" required></input>
          <button type="submit" class="btn btn-light btn-lg chat-submit-button">
            <i class="bi bi-send-fill"></i>
          </button>
        </div>
      </form>
    </div> -->
    <div class="d-flex p-0 m-0 flex-column justify-content-center align-items-center">
      <div class="d-flex flex-row" style="border-top: solid 1px #e0e0e0; padding-top: 10px;"></div>
      <form name="questionForm" id="questionForm" class="d-flex flex-row w-100" enctype="multipart/form-data">
        <div class="d-flex flex-row w-100">
          <!-- File Upload Icon -->
          <label for="fileUpload" class="btn btn-light btn-lg chat-upload-button me-2">
            <i class="bi bi-paperclip"></i>
          </label>
          <input type="file" id="fileUpload" name="file" style="display: none;">

          <!-- Chat Input -->
          <input class="form-control chat-input ms-lg-1" placeholder="Write your question here..." type="text"
            id="userQuestion" name="question" required></input>
          <button type="submit" class="btn btn-light btn-lg chat-submit-button">
            <i class="bi bi-send-fill"></i>
          </button>
        </div>
      </form>
    </div>

    <div class="d-flex px-3 pt-0 pb-2 w-100 justify-content-center align-items-center">
      <div class="d-flex flex-row py-2 powerdTextBox text-center w-100 justify-content-center align-items-center">
        <p class="mb-0">Powered By : <span>KodeTech</span></p>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
    integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
    integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
    crossorigin="anonymous"></script>


  <script>
    document.addEventListener('DOMContentLoaded', function () {
      let chatHistory = [];

      // store chat state in localStorage
      function storeThreadId(data) {
        // localStorage.setItem('threadId', data.threadId);
        // localStorage.setItem('assistantID', data.assistantID);
        // localStorage.setItem('vectorStoreID', data.vectorStoreID);
        // localStorage.setItem('uploadedDocuments', data.uploadedDocuments);
        localStorage.setItem('chatId', data.chatId);
      }

      // retrieve chat state from localStorage
      function retrieveThreadId() {
        // const threadID = localStorage.getItem('threadId') || "";
        // const assistantID = localStorage.getItem('assistantID') || "";
        // const vectorStoreID = localStorage.getItem('vectorStoreID') || "";
        const chatId = localStorage.getItem('chatId') || ""; 
        // const uploadedDocuments = localStorage.getItem('uploadedDocuments') || "";
        return { chatId: chatId };
      }

      // format bot messages
      function formatBotMessage(text) {
        let formattedText = text.replace(/\*\*(.+?)\*\*/g, '$1');
        formattedText = formattedText.replace(/\n/g, '<br>');
        formattedText = formattedText.replace(/- (.+)/g, '<li>$1</li>');

        if (formattedText.includes('<li>')) {
          formattedText = formattedText.replace(/(<li>.+<\/li>)/g, '<ul>$1</ul>');
        }

        formattedText = formattedText.replace(/### (.+)/g, '<p>$1</p>');
        return formattedText;
      }

      // update chat ui
      function updateChatUI() {
        const responseDiv = document.getElementById('response');
        responseDiv.innerHTML = '';

        chatHistory.forEach(message => {
          if (message.sender === 'user') {
            responseDiv.innerHTML += `
          <div class="user-message">
            <img class="message-image ms-2" src="/user.webp">
            <div class="messageWrapper">
              <p class="mb-2">${message.text}</p>
            </div>
          </div>
        `;
          } else if (message.sender === 'bot') {
            const formattedMessage = formatBotMessage(message.text);
            responseDiv.innerHTML += `
          <div class="bot-message">
            <img class="message-image" src="/agent.png">
            <div class="messageWrapper">
              ${formattedMessage}
            </div>
          </div>
        `;
          } else if (message.sender === 'typing') {
            responseDiv.innerHTML += `
          <div class="typing-message">
            <img class="message-image" src="/agent.png">
            <div class="messageWrapper">
              <p class="mb-2">Typing...</p>
            </div>
          </div>
        `;
          }
        });
        responseDiv.scrollTop = responseDiv.scrollHeight;
      }

      // form submission
      document.getElementById('questionForm').addEventListener('submit', function (event) {
        event.preventDefault();

        const userQuestion = document.getElementById('userQuestion').value;
        const allId = retrieveThreadId();
        const fileInput = document.getElementById('fileUpload');
        const file = fileInput.files[0];

        const formData = new FormData();
        formData.append('question', userQuestion);
        formData.append('chatId', allId.chatId);

        if (file) {
          formData.append('file', file);
          chatHistory.push({ sender: 'bot', text: `File added: ${file.name}` });
        }

        chatHistory.push({ sender: 'user', text: userQuestion });
        updateChatUI();

        chatHistory.push({ sender: 'typing', text: '' });
        updateChatUI();

        document.getElementById('userQuestion').value = '';
        fileInput.value = '';

        fetch('/question-response', {
          method: 'POST',
          body: formData,
        })
          .then(response => response.json())
          .then(data => {
            console.log("Server response:", data);

            // remove typing message
            chatHistory.pop();

            // add the bot response to chat history
            chatHistory.push({ sender: 'bot', text: data.message });
            updateChatUI();

            if (data) {
              storeThreadId(data); // store chatId - in localStorage
            }
          })
          .catch(error => {
            document.getElementById('response').innerHTML += `<p>Error submitting question: ${error.message}</p>`;
          });
      });
    });

  </script>
</body>

</html>